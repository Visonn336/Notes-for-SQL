What are User Defined Functions (UDFs)

    User Defined Functions (UDFs) in SQL are custom functions created by users to
    perform specific tasks that can be reused in SQL queries.
    They help encapsulate logic, make code reusable, and simplify complex calculations.



Types of User Defined Functions:

    Scalar Functions: Returns a single value.

        Example: A scalar function that returns the square of a number.

            CREATE FUNCTION dbo.Square(@Number INT)
            RETURNS INT
            AS
            BEGIN
                RETURN @Number * @Number
            END

            Usage:

                SELECT dbo.Square(5) AS SquareOfFive;

                Result:

                    SquareOfFive 25



    Table-Valued Functions: Returns a table.

        Example: A table-valued function that returns a list of employees in a specific department.

            CREATE FUNCTION dbo.GetEmployeesByDepartment(@DepartmentID INT)
            RETURNS TABLE
            AS
            RETURN
            (
                SELECT EmployeeID, Name, DepartmentID
                FROM Employees
                WHERE DepartmentID = @DepartmentID
            )

            Usage:

                SELECT * FROM dbo.GetEmployeesByDepartment(1, 4, 7);

                Result:

                    EmployeeID | Name       | DepartmentID
                    -----------|------------|--------------
                    1          | John Doe   | 1
                    2          | Jane Smith | 1



    Inline Table-Valued Functions: Returns a table and is defined using a single SELECT statement.

        Example: An inline table-valued function that returns employees with a salary above a certain amount.

            CREATE FUNCTION dbo.GetHighSalaryEmployees(@MinSalary DECIMAL(10, 2))
            RETURNS TABLE
            AS
            RETURN
            (
                SELECT EmployeeID, Name, Salary
                FROM Employees
                WHERE Salary > @MinSalary
            )

            Usage:

                SELECT * FROM dbo.GetHighSalaryEmployees(50000);

                Result:

                    EmployeeID | Name       | Salary
                    -----------|------------|--------
                    1          | John Doe   | 60000
                    3          | Alice Jones| 75000



What are Multi-Statement Table-Valued Functions? (MSTVFs)

    A Multi-Statement Table-Valued Function (MSTVF) in SQL is a type of Table-Valued Function (TVF)
    that allows you to execute multiple SQL statements and return a table as a result.
    MSTVFs are defined with a BEGIN...END block and can include complex logic, control-of-flow elements, and multiple statements.



    Key Features of Multi-Statement Table-Valued Functions (MSTVFs):

        Structure: Defined with a BEGIN...END block, allowing for multiple statements.

        Return Type: Uses a table variable to define the structure of the table being returned.

        Flexibility: Can include complex logic, control-of-flow elements (such as IF statements and loops), and multiple SQL statements.

        Performance: Generally, they have a higher overhead compared to Inline TVFs due to the complexity and
        the need for SQL Server to manage the table variable and multiple statements.



    Example of a Multi-Statement Table-Valued Function:

        Let's create an example MSTVF that returns a list of employees along with their departments,
        including only those departments with more than a specified number of employees.

        Tables:

            CREATE TABLE Employees (
                EmployeeID INT PRIMARY KEY,
                Name NVARCHAR(100),
                DepartmentID INT,
                Salary DECIMAL(10, 2)
            );

            CREATE TABLE Departments (
                DepartmentID INT PRIMARY KEY,
                DepartmentName NVARCHAR(100)
            );


        Multi-Statement Table-Valued Function:

            CREATE FUNCTION dbo.GetEmployeesInLargeDepartments(@MinEmployees INT)
            RETURNS @EmployeeTable TABLE
            (
                EmployeeID INT,
                Name NVARCHAR(100),
                DepartmentID INT,
                DepartmentName NVARCHAR(100)
            )
            AS
            BEGIN
                INSERT INTO @EmployeeTable (EmployeeID, Name, DepartmentID, DepartmentName)
                SELECT e.EmployeeID, e.Name, e.DepartmentID, d.DepartmentName
                FROM Employees e
                JOIN Departments d ON e.DepartmentID = d.DepartmentID
                WHERE (SELECT COUNT(*) FROM Employees WHERE DepartmentID = e.DepartmentID) > @MinEmployees

                RETURN
            END

            Usage:

                SELECT * FROM dbo.GetEmployeesInLargeDepartments(3);